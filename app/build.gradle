buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        jcenter { url "http://jcenter.bintray.com/" }
    }
    dependencies {
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'de.hannesstruss:godot:+'
        classpath 'com.ofg:uptodate-gradle-plugin:1.5.0'
    }
}

// Manifest version information!
def versionMajor = rootProject.versionMajor
def versionMinor = rootProject.versionMinor
def versionPatch = rootProject.versionPatch
def versionBuild = rootProject.versionBuild

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.ofg.uptodate'
apply plugin: 'de.hannesstruss.godot'

apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/findbugs.gradle"
apply from: "$rootDir/gradle/pmd.gradle"
check.dependsOn('checkstyle')
check.dependsOn('findbugs')
check.dependsOn('pmd')

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url 'https://maven.fabric.io/public' }
    jcenter { url 'http://jcenter.bintray.com/' }
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def date = new Date()
def buildTime = date.format("dd.MM.yy", TimeZone.getTimeZone("UTC"))
def buildTimeInternal = date.format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
def packagename = "com.umad.wat"

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        applicationId "${packagename}"

        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTimeInternal}\""
        buildConfigField "String", "PROJECT_NUMBER", "\"${manifestPlaceholders.projectNumber}\""

        testApplicationId "${packagename}.tests"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [fabricApiKey          : '42feb204216928f099103c90f8d606e0fa1f8951',
                                localyticsApiKey      : '44a447a7010d9d81a125b93-68991516-5723-11e5-0784-00deb82fd81f',
                                pushwooshApiKey       : '3177F-3F0B3',
                                pushwooshProjectNumber: 'A432999893439',
                                projectNumber         : '432999893439']
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile file("../keystore/release.keystore")
            storePassword "rUa9thtM2CwrJpcc"
            keyAlias "release"
            keyPassword "F9BggB879wqKhn4P"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
            minifyEnabled false
            shrinkResources false
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles file('proguard-rules.pro')
            signingConfig signingConfigs.release

            ext.betaDistributionReleaseNotesFilePath = "app/fabric_beta_release_notes.txt"
            ext.betaDistributionEmailsFilePath = "app/fabric_beta_distribution_emails.txt"
            ext.betaDistributionNotifications = true
        }
    }

    productFlavors {
        internal {
            applicationId "${packagename}.internal"
        }
        stage {
            applicationId "${packagename}.stage"
        }
        production {
            applicationId "${packagename}"
        }
    }

    lintOptions {
        abortOnError false

        textReport true
        textOutput 'stdout'
        disable 'InvalidPackage', 'ContentDescription', 'UnusedResources',
                'IconColors', 'IconDensities', 'IconDuplicates', 'RtlHardcoded', 'GifUsage'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

configurations {
    internalDebugCompile
}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:support-v4:${SUPPORT_V4_VERSION}"
    compile "com.android.support:appcompat-v7:${SUPPORT_V7_VERSION}"
    compile "com.android.support:recyclerview-v7:${SUPPORT_V7_VERSION}"
    compile "com.android.support:cardview-v7:${SUPPORT_V7_VERSION}"
    compile "com.android.support:gridlayout-v7:${SUPPORT_V7_VERSION}"
    compile "com.android.support:design:${SUPPORT_V7_VERSION}"
    // Third party
    compile project(':thirdparty:vpindicator')
    compile project(':thirdparty:noclippingviewpager')
    compile project(':thirdparty:thin-download-manager')
//    compile project(':thirdparty:android-gif-drawable')
    // Services
    compile 'com.pushwoosh:pushwoosh:3.0.1'
    // Dependency Injection
    compile 'com.google.dagger:dagger:2.0.1'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'org.glassfish:javax.annotation:10.0-b28'
    // Network
    compile 'net.danlew:android.joda:2.8.1'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    internalCompile 'com.squareup.retrofit:retrofit-mock:1.9.0'
    // Data
    compile 'com.github.frankiesardo:auto-parcel:0.3'
    apt 'com.github.frankiesardo:auto-parcel-processor:0.3'
    // UI
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.9'
    compile "com.github.andkulikov:transitions-everywhere:1.4.0"
    compile 'com.kboyarshinov:autoinflate:0.1.1'
    compile "com.jakewharton:butterknife:${BUTTERKNIFE}"
//    compile 'com.etsy.android.grid:library:1.0.5'
    compile('com.github.florent37:materialimageloading:1.0.1@aar') {
        transitive = true
    }
    compile 'cat.ppicas.customtypeface:library:2.0.0'
    // Debug
    compile 'com.jakewharton.timber:timber:3.1.0'
    internalCompile 'com.jakewharton.madge:madge:1.1.2'
    internalCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    internalCompile 'com.mattprecious.telescope:telescope:1.4.0@aar'
    internalCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    productionCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'

    // rxJava
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:0.24.0'
    // Espresso 2 Dependencies
    androidTestCompile('com.android.support.test:runner:0.2') {
        exclude module: 'support-annotations'
    }
    androidTestCompile 'com.android.support.test:rules:0.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.1'
    androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.1') {
        exclude module: 'support-annotations'
    }
    // Analytics
    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true;
    }
    // Social SDK
    compile 'com.facebook.android:facebook-android-sdk:4.2.0'
    compile 'com.vk:androidsdk:1.5.5'
}

// change apk name
android.applicationVariants.all { variant ->
    for (output in variant.outputs) {
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
            def fileName = "ozome-android-${output.name}.apk"
//            def fileName = "ozome-${output.name}-${buildTime}.apk"
            output.outputFile = new File(outputFile.parent, fileName)
        }
    }
}

// print build finish time
gradle.buildFinished { buildResult ->
    def buildFinishDate = new Date()
    def formattedDate = buildFinishDate.format('yyyy-MM-dd HH:mm:ss')
    def versionCode = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    def versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    println "Build v.${versionName}(${versionCode}) finished: ${formattedDate}"
}
